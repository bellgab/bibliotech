# ================================================================
# BIBLIOTECH LARAVEL .ENV PÉLDA - POSTGRESQL KONFIGURÁCIÓ
# ================================================================
#
# CÉLJA: Laravel alkalmazás PostgreSQL adatbázishoz való csatlakozása
# HASZNÁLAT: Másold át a .env fájlba a PostgreSQL használatához
# ÖSSZEHASONLÍTÁS: MariaDB vs PostgreSQL beállítások
#
# VÁLTÁS ADATBÁZISOK KÖZÖTT:
# 1. Másold be a megfelelő DB_ változókat
# 2. docker-compose restart
# 3. php artisan migrate (ha szükséges)
# ================================================================

APP_NAME="BiblioTech (PostgreSQL)"
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost:8080

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

# ================================================================
# POSTGRESQL ADATBÁZIS KONFIGURÁCIÓ
# ================================================================

# FONTOSAK: Eltérő értékek a MariaDB verzióhoz képest!

# PostgreSQL kapcsolat driver
DB_CONNECTION=pgsql

# Docker service név (docker-compose.yml-ből)
DB_HOST=postgresql

# PostgreSQL alapértelmezett port
DB_PORT=5432

# Adatbázis név (docker-compose.yml environment változóból)
DB_DATABASE=bibliotech_pg

# Felhasználónév és jelszó (docker-compose.yml-ből)
DB_USERNAME=bibliotech_user
DB_PASSWORD=bibliotech_pass

# ================================================================
# POSTGRESQL SPECIFIKUS BEÁLLÍTÁSOK
# ================================================================

# Séma név (opcionális, PostgreSQL specifikus)
DB_SCHEMA=public

# SSL mód (fejlesztési környezet: kikapcsolva)
DB_SSLMODE=disable

# Charset (PostgreSQL: UTF8)
DB_CHARSET=utf8

# ================================================================
# ÖSSZEHASONLÍTÁS: MARIADB VS POSTGRESQL BEÁLLÍTÁSOK
# ================================================================

# MariaDB beállítások (referenciaként):
# DB_CONNECTION=mysql
# DB_HOST=mariadb
# DB_PORT=3306  
# DB_DATABASE=bibliotech
# DB_USERNAME=bibliotech_user
# DB_PASSWORD=bibliotech_pass

# PostgreSQL beállítások (aktuális):
# DB_CONNECTION=pgsql
# DB_HOST=postgresql
# DB_PORT=5432
# DB_DATABASE=bibliotech_pg
# DB_USERNAME=bibliotech_user
# DB_PASSWORD=bibliotech_pass

# ================================================================
# LARAVEL SPECIFIKUS KONFIGURÁCIÓK
# ================================================================

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

# ================================================================
# REDIS KONFIGURÁCIÓ (OPCIONÁLIS)
# ================================================================

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

# ================================================================
# EMAIL KONFIGURÁCIÓ
# ================================================================

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

# ================================================================
# KÜLÖNBÖZŐ ADATBÁZIS DRIVEREK ÖSSZEHASONLÍTÁSA
# ================================================================

# MYSQL/MARIADB ELŐNYÖK:
# - Széles körű támogatás és dokumentáció
# - Egyszerűbb telepítés és konfiguráció
# - Jobb kompatibilitás régebbi alkalmazásokkal
# - MyISAM és InnoDB motor választás

# POSTGRESQL ELŐNYÖK:
# - Fejlettebb SQL szabvány támogatás
# - JSON/JSONB natív támogatás
# - Fejlett indexelési lehetőségek (GIN, GiST)
# - Jobb ACID megfelelőség
# - Window functions
# - Custom típusok és függvények
# - Jobb teljesítmény komplex lekérdezéseknél

# ================================================================
# LARAVEL MIGRÁCIÓS KÜLÖNBSÉGEK
# ================================================================

# MariaDB Migration példa:
# Schema::create('users', function (Blueprint $table) {
#     $table->id();
#     $table->string('name');
#     $table->timestamp('created_at')->useCurrent();
# });

# PostgreSQL Migration példa:
# Schema::create('users', function (Blueprint $table) {
#     $table->id();  // SERIAL PRIMARY KEY
#     $table->string('name');
#     $table->timestampTz('created_at')->useCurrent();  // TIMESTAMPTZ
# });

# POSTGRESQL SPECIFIKUS LARAVEL FUNKCIÓK:
# - $table->json('data');           // JSON típus
# - $table->jsonb('data');          // JSONB típus (gyorsabb)
# - $table->uuid('id');             // UUID típus
# - $table->geometry('location');   // PostGIS geometria
# - $table->hstore('data');         // Key-value store

# ================================================================
# PERFORMANCE ÉS OPTIMALIZÁLÁS
# ================================================================

# LARAVEL QUERY BUILDER KÜLÖNBSÉGEK:

# MySQL/MariaDB:
# DB::table('users')->where('created_at', '>', '2024-01-01');

# PostgreSQL (időzóna tudatos):
# DB::table('users')->where('created_at', '>', '2024-01-01 00:00:00+00');

# JSON LEKÉRDEZÉSEK:

# MySQL (JSON_EXTRACT):
# DB::table('users')->whereRaw("JSON_EXTRACT(data, '$.age') > ?", [18]);

# PostgreSQL (natív operátorok):
# DB::table('users')->whereRaw("data->>'age'::int > ?", [18]);

# ================================================================
# DOCKER COMPOSE PARANCSOK ADATBÁZIS VÁLTÁSHOZ
# ================================================================

# CSAK POSTGRESQL INDÍTÁSA:
# docker-compose up -d nginx php postgresql

# CSAK MARIADB INDÍTÁSA:  
# docker-compose up -d nginx php mariadb

# MINDKÉT ADATBÁZIS PÁRHUZAMOSAN:
# docker-compose up -d

# ADATBÁZIS KAPCSOLAT TESZTELÉSE:
# docker-compose exec php php artisan tinker
# DB::connection()->getPdo();

# MIGRÁCIÓ FUTTATÁSA:
# docker-compose exec php php artisan migrate

# ADATBÁZIS SEEDER:
# docker-compose exec php php artisan db:seed

# ================================================================
# HIBAKERESÉS ÉS TROUBLESHOOTING
# ================================================================

# POSTGRESQL KAPCSOLAT TESZTELÉSE:
# docker-compose exec postgresql psql -U bibliotech_user -d bibliotech_pg

# LARAVEL LOG ELLENŐRZÉSE:
# docker-compose exec php tail -f storage/logs/laravel.log

# POSTGRESQL LOGOK:
# docker-compose logs postgresql

# KAPCSOLATI PROBLÉMÁK DEBUGOLÁSA:
# 1. Ellenőrizd a DB_HOST értéket (postgresql)
# 2. Ellenőrizd a DB_PORT értéket (5432)
# 3. Ellenőrizd a konténer neveket: docker-compose ps
# 4. Hálózat ellenőrzése: docker network inspect bibliotech_bibliotech_network

# ================================================================
# BIZTONSÁGI MEGJEGYZÉSEK
# ================================================================

# FEJLESZTÉSI KÖRNYEZET:
# - Egyszerű jelszavak megengedhetők
# - Port mapping külső hozzáféréshez
# - Debug mód engedélyezett

# ÉLES KÖRNYEZET:
# - Erős jelszavak használata
# - .env fájl védelme (.gitignore)
# - DB_DEBUG=false
# - Port mapping korlátozása
# - SSL/TLS engedélyezése PostgreSQL-ben
