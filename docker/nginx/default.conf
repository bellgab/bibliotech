# =====================================================================
# BIBLIOTECH NGINX KONFIGURÁCIÓS FÁJL
# =====================================================================
#
# Ez az NGINX virtual host konfiguráció a Bibliotech Laravel 
# alkalmazás kiszolgálásához készült
#
# FŐBB FUNKCIÓK:
# ==============
# ✅ Laravel URL routing támogatás (pretty URLs)
# ✅ PHP-FPM integráció FastCGI protokollon keresztül
# ✅ Statikus fájlok optimalizált kiszolgálása
# ✅ Biztonsági védelmek (rejtett fájlok, directory traversal)
# ✅ Cache beállítások teljesítmény optimalizáláshoz
# ✅ Részletes naplózás hibaelhárításhoz
#
# DOCKER KÖRNYEZET SPECIFIKUS BEÁLLÍTÁSOK:
# ========================================
# - php:9000 : Docker service name használata (nem IP cím)
# - /var/www/html/public : konténerben mount-olt könyvtár
# - 80-as port : konténer belső portja (8080-ra van mappolva)
#
# ÉLES KÖRNYEZETBEN MÓDOSÍTANDÓ:
# ==============================
# - SSL/TLS konfigurációk hozzáadása
# - Gzip kompresszió bekapcsolása
# - Rate limiting és DDoS védelem
# - Security header-ek hozzáadása

# =====================================================================
# VIRTUAL HOST DEFINÍCIÓ
# =====================================================================

server {
    # ================================================================
    # ALAPVETŐ SZERVER BEÁLLÍTÁSOK
    # ================================================================
    
    # HTTP port (80) figyelése
    # Docker konténerben ez lesz a belső port
    # A docker-compose.yml 8080:80 mapping-gel érhető el kívülről
    listen 80;
    
    # Szerver domain neve
    # localhost: fejlesztői környezethez
    # ÉLES KÖRNYEZETBEN: bibliotech.com, www.bibliotech.com
    server_name localhost;
    
    # Document root: Laravel public könyvtára
    # FONTOS: Laravel-ben MINDIG a /public könyvtár legyen a webroot!
    # Ez biztonsági okokból kritikus (.env, config fájlok elrejtése)
    root /var/www/html/public;
    
    # Alapértelmezett index fájlok prioritási sorrendben
    # Laravel esetén az index.php fogja kezelni az összes kérést
    index index.php index.html index.htm;

    # Karakterkódolás beállítása UTF-8-ra
    # Magyar ékezetes karakterekhez elengedhetetlen
    charset utf-8;

    # ================================================================
    # FŐ URL ROUTING (LARAVEL PRETTY URLS)
    # ================================================================
    
    # Ez a konfiguráció lehetővé teszi a Laravel "pretty URL"-eket
    # pl.: /books/1 helyett /index.php?route=books&id=1
    
    location / {
        # try_files direktíva működése:
        # 1. Keres egy fájlt az adott URI-n ($uri)
        # 2. Ha nem találja, keres egy könyvtárat ($uri/)  
        # 3. Ha az sem létezik, átirányítja az index.php-ra
        # 4. $query_string: GET paraméterek továbbítása
        
        # PÉLDA:
        # /books/create → nincs ilyen fájl → /index.php?route=books/create
        # /css/app.css → létezik a fájl → közvetlenül kiszolgálja
        try_files $uri $uri/ /index.php?$query_string;
    }

    # ================================================================
    # PHP FÁJLOK KEZELÉSE (FASTCGI PROXY)
    # ================================================================
    
    # Minden .php végű fájlra vonatkozó konfiguráció
    # Ez a legfontosabb rész a Laravel működéséhez!
    
    location ~ \.php$ {
        # Biztonsági ellenőrzés: csak létező PHP fájlokat dolgozzon fel
        # 404 hibát ad, ha a .php fájl nem létezik
        # Megakadályozza a PHP injection támadásokat
        try_files $uri =404;
        
        # Path info szétválasztása (nem minden Laravel setupnál szükséges)
        # Példa: /index.php/extra/path/info szétválasztása
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        
        # ============================================================
        # FASTCGI KAPCSOLAT A PHP-FPM KONTÉNERREL
        # ============================================================
        
        # php:9000 - Docker service név és port
        # DOCKER ELŐNY: IP cím helyett service névvel hivatkozunk
        # 9000: PHP-FPM alapértelmezett portja
        # ALTERNATÍVA: Unix socket használható jobb teljesítményért
        fastcgi_pass php:9000;
        
        # Alapértelmezett PHP fájl index
        fastcgi_index index.php;
        
        # ============================================================
        # FASTCGI PARAMÉTEREK
        # ============================================================
        
        # SCRIPT_FILENAME: a végrehajtandó PHP fájl teljes elérési útja
        # $document_root + $fastcgi_script_name = /var/www/html/public/index.php
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        
        # Standard FastCGI paraméterek betöltése
        # Tartalmazza: REQUEST_METHOD, QUERY_STRING, CONTENT_TYPE, stb.
        include fastcgi_params;
        
        # ============================================================
        # TIMEOUT BEÁLLÍTÁSOK (NAGY LARAVEL MŰVELETEKHEZ)
        # ============================================================
        
        # PHP script válaszának olvasási időkorlátja
        # 300 sec = 5 perc (migrációkhoz, nagy adatbázis műveletekhez)
        fastcgi_read_timeout 300;
        
        # PHP-FPM kapcsolat felépítési időkorlátja
        fastcgi_connect_timeout 300;
        
        # Adatok küldési időkorlátja PHP-FPM felé
        fastcgi_send_timeout 300;
        
        # ========================================================
        # DODATEK FASTCGI BEÁLLÍTÁSOK (kommentezve, opcionálisan):
        # ========================================================
        
        # Buffer méret növelése nagy válaszokhoz:
        # fastcgi_buffer_size 128k;
        # fastcgi_buffers 4 256k;
        # fastcgi_busy_buffers_size 256k;
        
        # Keep-alive kapcsolatok PHP-FPM-mel:
        # fastcgi_keep_conn on;
        
        # Request body cache-elés:
        # fastcgi_request_buffering off;
    }

    # ================================================================
    # STATIKUS FÁJLOK OPTIMALIZÁLÁSA ÉS GYORSÍTÓTÁRAZÁSA
    # ================================================================
    
    # Statikus asset-ek (CSS, JS, képek) kezelése
    # Ezek a fájlok ritkán változnak, ezért hosszú távú cache-elést alkalmazunk
    
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # ============================================================
        # CACHE BEÁLLÍTÁSOK
        # ============================================================
        
        # 1 éves lejárati idő beállítása
        # INDOKLÁS: CSS/JS fájlok verziókezeléssel (Laravel Mix) rendelkeznek
        # Új verzióknál új fájlnév generálódik (hash-el)
        expires 1y;
        
        # Browser cache direktívák
        # public: proxy szerverek is cache-elhetik
        # immutable: böngésző nem ellenőrzi újra (modern böngészőkben)
        add_header Cache-Control "public, immutable";
        
        # Hiányzó fájloknál 404 visszaadása (nincs fallback)
        try_files $uri =404;
        
        # ========================================================
        # TELJESÍTMÉNY OPTIMALIZÁLÁS (opcionális):
        # ========================================================
        
        # Gzip tömörítés (ha nincs globálisan engedélyezve):
        # gzip_static on;
        
        # ETags kikapcsolása (expires header elegendő):
        # etag off;
        
        # Access log kikapcsolása statikus fájloknál:
        # access_log off;
    }

    # ================================================================
    # BIZTONSÁGI BEÁLLÍTÁSOK
    # ================================================================
    
    # Rejtett fájlok és könyvtárak védelme
    # Például: .env, .git, .htaccess, stb.
    
    location ~ /\. {
        # Teljes hozzáférés megtagadása
        deny all;
        
        # Ne naplózza a hozzáférési kísérleteket (spam elkerülése)
        access_log off;
        
        # Ne naplózza a "nem található" hibákat
        log_not_found off;
        
        # ========================================================
        # TOVÁBBI BIZTONSÁGI INTÉZKEDÉSEK (kommentezve):
        # ========================================================
        
        # Visszatérési státusz testreszabása:
        # return 404;  # vagy return 403;
        
        # Egyedi hibaoldal:
        # error_page 403 /403.html;
    }
    
    # ================================================================
    # TOVÁBBI BIZTONSÁGI SZABÁLYOK
    # ================================================================
    
    # Composer és egyéb érzékeny fájlok védelme
    location ~* \.(lock|json|md|yml|yaml|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Backup és temporary fájlok védelme
    location ~* \.(bak|backup|swp|tmp|temp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # ================================================================
    # LARAVEL SPECIFIKUS OPTIMALIZÁLÁSOK
    # ================================================================
    
    # Favicon kezelése (gyakori kérések optimalizálása)
    location = /favicon.ico { 
        # Ne naplózza a hozzáféréseket (sok kérés érkezik)
        access_log off; 
        
        # Ne naplózza, ha nem található
        log_not_found off; 
        
        # 30 napos cache
        expires 30d;
        add_header Cache-Control "public";
    }
    
    # Robots.txt kezelése (SEO optimalizálás)
    location = /robots.txt { 
        # Ne naplózza a hozzáféréseket
        access_log off; 
        
        # Ne naplózza, ha nem található
        log_not_found off; 
        
        # 1 napos cache (gyakrabban változhat)
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # Sitemap.xml optimalizálása (ha van)
    location = /sitemap.xml {
        access_log off;
        expires 1d;
        add_header Cache-Control "public";
    }

    # ================================================================
    # NAPLÓZÁSI KONFIGURÁCIÓ
    # ================================================================
    
    # Hiba naplózás
    # SZINTEK: debug, info, notice, warn, error, crit, alert, emerg
    # FEJLESZTÉS: debug vagy info szint ajánlott
    # ÉLES: warn vagy error szint ajánlott
    error_log /var/log/nginx/bibliotech_error.log warn;
    
    # Hozzáférési naplózás
    # FORMÁTUM: combined (részletes), main (standard), vagy egyedi
    # TELJESÍTMÉNY: nagy forgalomnál kikapcsolható
    access_log /var/log/nginx/bibliotech_access.log combined;
    
    # ================================================================
    # KIEGÉSZÍTŐ BIZTONSÁGI ÉS TELJESÍTMÉNY FEJLÉCEK
    # ================================================================
    
    # Security headers (opcionálisan engedélyezhető):
    # add_header X-Frame-Options "SAMEORIGIN" always;
    # add_header X-Content-Type-Options "nosniff" always;
    # add_header X-XSS-Protection "1; mode=block" always;
    # add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # HTTPS átirányítás (ha HTTPS van beállítva):
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Server banner elrejtése (nginx verzió):
    # server_tokens off;
}

# ================================================================
# KONFIGURÁCIÓS MEGJEGYZÉSEK ÉS TROUBLESHOOTING
# ================================================================

# HIBAKERESÉSI TIPPEK:
# 1. Naplók ellenőrzése: docker-compose logs nginx
# 2. Konfiguráció tesztelése: docker exec <nginx_container> nginx -t
# 3. Konfiguráció újratöltése: docker exec <nginx_container> nginx -s reload

# TELJESÍTMÉNY TUNING:
# - worker_processes auto; (http szinten)
# - worker_connections 1024; (events szinten)
# - keepalive_timeout 65;
# - client_max_body_size 100M; (nagy fájl feltöltéshez)

# BIZTONSÁG NÖVELÉSE:
# - Rate limiting implementálása
# - IP whitelist/blacklist
# - ModSecurity vagy hasonló WAF
# - SSL/TLS konfiguráció (Let's Encrypt)

# MONITOROZÁS:
# - Access log analízis (GoAccess, AWStats)
# - Error rate monitoring
# - Response time tracking
# - Resource usage monitoring
