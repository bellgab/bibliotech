; =====================================================================
; BIBLIOTECH PHP KONFIGURÁCIÓS FÁJL
; =====================================================================
;
; Ez a php.ini fájl tartalmazza a Laravel alkalmazáshoz optimalizált 
; PHP beállításokat speciálisan fejlesztői környezethez
;
; FÁJL HELYE A KONTÉNERBEN:
; =========================
; /usr/local/etc/php/conf.d/bibliotech.ini
;
; A conf.d könyvtárban lévő .ini fájlok automatikusan betöltődnek
; és felülírják az alapértelmezett php.ini beállításokat
;
; ÉLES KÖRNYEZETBEN MÓDOSÍTANDÓ BEÁLLÍTÁSOK:
; ==========================================
; - display_errors = Off
; - error_reporting = E_ERROR | E_WARNING | E_PARSE
; - opcache.validate_timestamps = 0
; - expose_php = Off

# =====================================================================
# HIBAKEZELÉS ÉS NAPLÓZÁS (DEVELOPMENT MODE)
# =====================================================================
# 
# FIGYELEM: Ezek a beállítások fejlesztéshez optimálisak!
# Éles környezetben biztonsági kockázatot jelenthetnek

# Hibák megjelenítése a böngészőben
# FEJLESZTÉSHEZ: On, ÉLESBEN: Off
display_errors = On

# Startup hibák megjelenítése (PHP indulásakor fellépő hibák)
# Hasznos extension problémák diagnosztizálásához
display_startup_errors = On

# Hibajelentési szint: minden hiba típus jelentése
# E_ALL = minden hiba, figyelmeztetés, notice
# ÉLES KÖRNYEZETBEN: E_ERROR | E_WARNING | E_PARSE
error_reporting = E_ALL

# Hibák naplózása fájlba (mindig legyen bekapcsolva!)
log_errors = On

# Hibanapló fájl helye
# ÉLES KÖRNYEZETBEN: /var/log/php/error.log (külön könyvtárban)
error_log = /var/log/php_errors.log

# =====================================================================
# VÉGREHAJTÁSI KORLÁTOK ÉS TELJESÍTMÉNY
# =====================================================================
#
# Ezek a beállítások meghatározzák, hogy mennyi ideig futhat egy script
# és mennyi memóriát használhat

# Maximális script futási idő másodpercben
# 300 sec = 5 perc (bőven elegendő Laravel műveletekhez)
# Alapértelmezett: 30 sec (gyakran kevés)
# MIGRÁCIÓKHOZ, SEEDER-EKHEZ: 600 sec ajánlott
max_execution_time = 300

# Maximális input feldolgozási idő
# Form adatok, POST kérések feldolgozási ideje
max_input_time = 300

# Memória limit egy script számára
# 512M: nagy Laravel alkalmazásokhoz elegendő
# Alapértelmezett: 128M (gyakran kevés)
# COMPOSER INSTALL-hoz: 1G vagy -1 (unlimited) kell
memory_limit = 512M

# =====================================================================
# FÁJLFELTÖLTÉS BEÁLLÍTÁSOK
# =====================================================================
#
# Laravel alkalmazásokban gyakran szükség van fájlfeltöltésre
# (profilképek, dokumentumok, könyv borítók stb.)

# Fájlfeltöltés engedélyezése
# BIZTONSÁGI FIGYELMEZTETÉS: mindig validáljuk a feltöltött fájlokat!
file_uploads = On

# Maximális fájlméret egy feltöltéshez
# 50M = 50 megabyte (könyvborítókhoz, PDF-ekhez elegendő)
# NAGY FÁJLOKHOZ: 100M vagy magasabb érték
upload_max_filesize = 50M

# Maximálisan egyszerre feltölthető fájlok száma
# 20 fájl: több fájl egyidejű feltöltéséhez
max_file_uploads = 20

# POST kérés maximális mérete
# FONTOS: Nagyobbnak kell lennie, mint upload_max_filesize * max_file_uploads
# 50M: egyetlen nagy fájl vagy több kisebb fájl feltöltéséhez
post_max_size = 50M

# =====================================================================
# IDŐZÓNA ÉS LOKALIZÁCIÓ
# =====================================================================
#
# Laravel alkalmazások időzóna-függő műveletekhez (időbélyegek, dátumok)

# Alapértelmezett időzóna beállítása
# "Europe/Budapest": magyar időzóna (CET/CEST)
# ALTERNATÍVÁK: "UTC", "Europe/London", "America/New_York"
# FONTOS: Laravel .env APP_TIMEZONE beállításával felülírható
date.timezone = "Europe/Budapest"

# =====================================================================
# SESSION KEZELÉS
# =====================================================================
#
# Laravel alapértelmezetten saját session kezelést használ,
# de ezek a beállítások a PHP natív session funkciókhoz szükségesek

# Session adatok tárolási módja
# "files": fájlrendszerben tárolja (alapértelmezett)
# ALTERNATÍVÁK: "redis", "memcached", "database"
session.save_handler = files

# Session fájlok tárolási helye
# "/tmp": ideiglenes könyvtár (Docker konténerben megfelelő)
# ÉLES KÖRNYEZETBEN: "/var/lib/php/sessions" (perzisztens)
session.save_path = "/tmp"

# Session élettartama másodpercben
# 1440 sec = 24 perc (alapértelmezett)
# HOSSZABB MUNKAMENETHEZ: 3600 (1 óra) vagy 7200 (2 óra)
session.gc_maxlifetime = 1440

# =====================================================================
# OPCACHE TELJESÍTMÉNY OPTIMALIZÁLÁS
# =====================================================================
#
# OPcache: PHP bytecode cache - jelentősen javítja a teljesítményt
# Lefordított PHP kódot cache-eli a memóriában

# OPcache engedélyezése web kérésekhez
# MINDIG LEGYEN BEKAPCSOLVA ÉLES KÖRNYEZETBEN!
opcache.enable = 1

# OPcache engedélyezése CLI módban is
# Hasznos Artisan parancsokhoz és cron job-okhoz
opcache.enable_cli = 1

# OPcache memória felhasználás
# 128MB: közepes alkalmazásokhoz elegendő
# NAGY ALKALMAZÁSOKHOZ: 256MB vagy 512MB
opcache.memory_consumption = 128

# String-ek cache-elésére fenntartott memória
# 8MB: általában elegendő
opcache.interned_strings_buffer = 8

# Maximálisan cache-elhető fájlok száma
# 4000: Laravel alkalmazásokhoz elegendő (vendor + app fájlok)
# NAGY PROJEKTEKHEZ: 10000+
opcache.max_accelerated_files = 4000

# Újravalidálási gyakoriság másodpercben
# 2 sec: fejlesztői módban gyors frissítés
# ÉLES KÖRNYEZETBEN: 0 (soha ne validáljon újra) vagy 60+ sec
opcache.revalidate_freq = 2

# Gyors leállítás engedélyezése
# Javítja a shutdown teljesítményt
opcache.fast_shutdown = 1

# =====================================================================
# OPCACHE DODATEK BEÁLLÍTÁSOK (kommentezve, opcionálisan használhatók):
# =====================================================================
#
# Fájl timestamp ellenőrzés kikapcsolása (CSAK ÉLES KÖRNYEZETBEN!):
# opcache.validate_timestamps = 0
#
# Preloading (PHP 7.4+, Laravel 8+ esetén):
# opcache.preload = /var/www/html/config/opcache-preload.php
# opcache.preload_user = www
#
# Memória felhasználási statisztikák engedélyezése:
# opcache.enable_file_override = 1

# =====================================================================
# EGYÉB FONTOS BEÁLLÍTÁSOK
# =====================================================================

# URL fájlok megnyitásának engedélyezése
# SZÜKSÉGES: Composer, Guzzle HTTP, külső API-k használatához
# BIZTONSÁGI FIGYELMEZTETÉS: csak megbízható URL-eket nyissunk meg!
allow_url_fopen = On

# Alapértelmezett karakterkódolás
# UTF-8: univerzális unicode támogatás (ékezetes karakterekhez)
# FONTOS: Laravel alapértelmezetten UTF-8-at használ
default_charset = "UTF-8"

# =====================================================================
# DODATEK BIZTONSÁGI ÉS TELJESÍTMÉNY BEÁLLÍTÁSOK
# =====================================================================
# (kommentezve, igény szerint engedélyezhetők)

# PHP verzió elrejtése a HTTP header-ekből (biztonság):
# expose_php = Off

# Funkció blacklist (biztonsági okokból tiltott funkciók):
# disable_functions = exec,passthru,shell_exec,system,proc_open,popen

# Maximum input változók száma (nagy form-okhoz):
# max_input_vars = 3000

# Realpath cache beállítások (teljesítmény):
# realpath_cache_size = 4096K
# realpath_cache_ttl = 600

# Zlib output compression (csökkenti a válasz méretet):
# zlib.output_compression = On

# Mail funkciók (Laravel-ben általában külső service-t használunk):
# sendmail_path = /usr/sbin/sendmail -t -i

# =====================================================================
# LARAVEL SPECIFIKUS AJÁNLÁSOK
# =====================================================================
#
# 1. .env fájlban definiált értékek felülírják ezeket:
#    APP_TIMEZONE=Europe/Budapest
#    SESSION_DRIVER=file
#    CACHE_DRIVER=file
#
# 2. Éles környezetben további optimalizálások:
#    php artisan config:cache
#    php artisan route:cache
#    php artisan view:cache
#    php artisan event:cache
#
# 3. Monitorozáshoz ajánlott extension-ök:
#    - Xdebug (fejlesztéshez)
#    - New Relic (teljesítmény monitorozás)
#    - Blackfire (profiling)
#
# 4. Memória és CPU intenzív műveletekhez:
#    - Queue worker-ek használata
#    - Redis/Memcached cache
#    - Database connection pooling
