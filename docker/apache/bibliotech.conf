# =====================================================================
# BIBLIOTECH APACHE VIRTUAL HOST KONFIGURÁCIÓS FÁJL
# =====================================================================
#
# Ez az Apache virtual host konfiguráció a Bibliotech Laravel 
# alkalmazás kiszolgálásához készült, oktatási és összehasonlítási célokra
#
# FŐBB FUNKCIÓK:
# ==============
# ✅ Laravel URL routing támogatás (mod_rewrite)
# ✅ PHP integráció mod_php modulon keresztül
# ✅ Statikus fájlok optimalizált kiszolgálása
# ✅ Biztonsági védelmek (.htaccess, directory traversal)
# ✅ Cache beállítások teljesítmény optimalizáláshoz
# ✅ Részletes naplózás hibaelhárításhoz
#
# APACHE vs NGINX KÜLÖNBSÉGEK:
# ============================
# - Apache: .htaccess fájlok támogatása (dinamikus konfiguráció)
# - Apache: mod_php (PHP beépített modulként)
# - Apache: Process/thread alapú architektúra
# - NGINX: Statikus konfiguráció, PHP-FPM külön folyamat
# - NGINX: Event-driven architektúra
#
# DOCKER KÖRNYEZET SPECIFIKUS BEÁLLÍTÁSOK:
# ========================================
# - mariadb:3306 : Docker service name használata
# - /var/www/html/public : konténerben mount-olt könyvtár
# - 80-as port : konténer belső portja (8090-re van mappolva)
#
# ÉLES KÖRNYEZETBEN MÓDOSÍTANDÓ:
# ==============================
# - SSL/TLS konfigurációk hozzáadása (mod_ssl)
# - Gzip kompresszió bekapcsolása (mod_deflate)
# - Security header-ek hozzáadása (mod_headers)
# - Rate limiting és DDoS védelem (mod_throttle)

# =====================================================================
# VIRTUAL HOST DEFINÍCIÓ
# =====================================================================

<VirtualHost *:80>
    # ================================================================
    # ALAPVETŐ SZERVER BEÁLLÍTÁSOK
    # ================================================================
    
    # Szerver domain neve
    # localhost: fejlesztői környezethez
    # ÉLES KÖRNYEZETBEN: bibliotech.com, www.bibliotech.com
    ServerName bibliotech-apache.local
    ServerAlias localhost
    
    # Szerver adminisztrátor email címe
    # Hibaoldalakra és jelentésekre kerül
    ServerAdmin admin@bibliotech.com
    
    # Document root: Laravel public könyvtára
    # FONTOS: Laravel-ben MINDIG a /public könyvtár legyen a webroot!
    # Apache automatikusan ezt használja kiindulási pontként
    DocumentRoot /var/www/html/public
    
    # ================================================================
    # KÖNYVTÁR SPECIFIKUS BEÁLLÍTÁSOK
    # ================================================================
    
    # Laravel public könyvtár konfigurációja
    <Directory /var/www/html/public>
        # ============================================================
        # ALAPVETŐ HOZZÁFÉRÉSI BEÁLLÍTÁSOK
        # ============================================================
        
        # Hozzáférés engedélyezése mindenkinek (fejlesztői környezet)
        # ÉLES KÖRNYEZETBEN: finomhangold az IP korlátozásokat
        Require all granted
        
        # Könyvtár indexelés tiltása (biztonsági okokból)
        # Ha nincs index.php, ne listázza a fájlokat
        Options -Indexes
        
        # Szimbolikus linkek követése (ha szükséges)
        # Laravel storage link-ekhez lehet hasznos
        Options +FollowSymLinks
        
        # ============================================================
        # MOD_REWRITE KONFIGURÁCIÓJA (Laravel URL Routing)
        # ============================================================
        
        # URL átírás engedélyezése
        # Ez biztosítja a Laravel "pretty URLs" működését
        RewriteEngine On
        
        # Laravel specifikus rewrite szabályok
        # Minden kérést az index.php-ra irányít, ha a fájl nem létezik
        
        # Ha a kért fájl vagy könyvtár létezik, szolgáld ki közvetlenül
        RewriteCond %{REQUEST_FILENAME} -d [OR]
        RewriteCond %{REQUEST_FILENAME} -f
        RewriteRule ^ - [L]
        
        # Minden más kérést irányítsd az index.php-ra
        # A Laravel router fogja feldolgozni az URL-t
        RewriteRule ^ index.php [L]
        
        # ============================================================
        # .HTACCESS FÁJLOK TÁMOGATÁSA
        # ============================================================
        
        # .htaccess fájlok olvasásának engedélyezése
        # Ez Apache-specifikus funkció (NGINX-ben nincs)
        AllowOverride All
        
        # ============================================================
        # BIZTONSÁGI BEÁLLÍTÁSOK
        # ============================================================
        
        # Érzékeny fájlok elrejtése
        <Files ~ "^\.">
            # .env, .git, .htaccess fájlok elrejtése
            Require all denied
        </Files>
        
        # PHP konfigurációs fájlok védése
        <FilesMatch "\.(env|log|ini)$">
            Require all denied
        </FilesMatch>
        
    </Directory>
    
    # ================================================================
    # STATIKUS FÁJLOK OPTIMALIZÁLÁSA
    # ================================================================
    
    # CSS, JS, képek cache beállításai
    <LocationMatch "\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$">
        # Browser cache: 1 hónap statikus fájlokra
        # FEJLESZTÉSBEN: rövidebb idő (1 óra)
        ExpiresActive On
        ExpiresDefault "access plus 1 hour"
        
        # Cache-Control header beállítása
        Header set Cache-Control "public, max-age=3600"
        
        # ETag generálás (verzió kontrolling)
        FileETag MTime Size
    </LocationMatch>
    
    # ================================================================
    # PHP BEÁLLÍTÁSOK (MOD_PHP SPECIFIKUS)
    # ================================================================
    
    # PHP fájlok kezelése mod_php modulon keresztül
    # Ez eltér az NGINX + PHP-FPM megoldástól
    <FilesMatch "\.php$">
        SetHandler application/x-httpd-php
    </FilesMatch>
    
    # PHP hibák naplózása (fejlesztői környezet)
    # ÉLES KÖRNYEZETBEN: kapcsold ki a display_errors-t
    php_flag display_errors on
    php_flag log_errors on
    php_value error_log /var/log/apache2/php_errors.log
    
    # ================================================================
    # NAPLÓZÁSI BEÁLLÍTÁSOK
    # ================================================================
    
    # Hozzáférési napló: minden HTTP kérés rögzítése
    # Combined formátum: IP, idő, kérés, válasz, user agent, referer
    CustomLog /var/log/apache2/bibliotech_access.log combined
    
    # Hibanapló: Apache és PHP hibák rögzítése
    ErrorLog /var/log/apache2/bibliotech_error.log
    
    # Naplózási szint beállítása
    # warn: figyelmeztetések és hibák
    # FEJLESZTÉSBEN: debug (részletes információk)
    LogLevel warn
    
    # ================================================================
    # TELJESÍTMÉNY OPTIMALIZÁLÁS
    # ================================================================
    
    # Gzip kompresszió (ha mod_deflate engedélyezett)
    <IfModule mod_deflate.c>
        # Szöveges fájlok tömörítése
        AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript application/json
        
        # Tömörítési szint (1-9, 6 az optimális)
        DeflateCompressionLevel 6
    </IfModule>
    
    # ================================================================
    # BIZTONSÁGI HEADER-EK
    # ================================================================
    
    # Biztonsági header-ek hozzáadása (ha mod_headers engedélyezett)
    <IfModule mod_headers.c>
        # XSS védelem
        Header always set X-XSS-Protection "1; mode=block"
        
        # MIME típus sniffing megakadályozása
        Header always set X-Content-Type-Options "nosniff"
        
        # Clickjacking védelem
        Header always set X-Frame-Options "SAMEORIGIN"
        
        # Referrer policy
        Header always set Referrer-Policy "strict-origin-when-cross-origin"
    </IfModule>

</VirtualHost>

# =====================================================================
# APACHE KONFIGURÁCIÓS MEGJEGYZÉSEK
# =====================================================================
#
# APACHE vs NGINX TELJESÍTMÉNY ÖSSZEHASONLÍTÁS:
# ============================================
# 
# APACHE ELŐNYEI:
# - .htaccess támogatás (dinamikus konfiguráció)
# - Gazdag modul ökoszisztéma
# - mod_php integráció (egyszerűbb telepítés)
# - Széles körű dokumentáció és közösség
# 
# NGINX ELŐNYEI:
# - Jobb teljesítmény nagy forgalomnál
# - Kisebb memóriaigény
# - Event-driven architektúra
# - Jobb statikus fájl kiszolgálás
#
# TESZTELÉSI PARANCSOK:
# ====================
# 
# Apache Bench teljesítmény teszt:
# ab -n 1000 -c 10 http://localhost:8090/
# 
# Siege terheléses teszt:
# siege -c 10 -t 30s http://localhost:8090/
# 
# Konfiguráció tesztelése:
# docker-compose exec apache apache2ctl configtest
# 
# Modulok listázása:
# docker-compose exec apache apache2ctl -M
#
# HIBAELHÁRÍTÁS:
# ==============
# 
# 1. Apache hibák: docker-compose logs apache
# 2. PHP hibák: docker-compose exec apache tail -f /var/log/apache2/php_errors.log
# 3. Hozzáférési napló: docker-compose exec apache tail -f /var/log/apache2/bibliotech_access.log
# 4. Konfiguráció újratöltése: docker-compose exec apache apache2ctl graceful
# 5. Syntax ellenőrzés: docker-compose exec apache apache2ctl -t
