# =====================================================================
# BIBLIOTECH - Könyvtári Menedzser Rendszer Docker Környezet
# =====================================================================
# 
# Ez a docker-compose.yml fájl definiálja a teljes fejlesztői környezetet
# a Bibliotech Laravel alkalmazáshoz. A környezet több konténerből áll:
# 
# 1. NGINX Webszerver (port 8080) - HTTP kérések kiszolgálása
# 2. PHP-FPM 8.2 - Laravel alkalmazás futtatása
# 3. MariaDB 10.5 - Adatbázis szerver
# 4. phpMyAdmin (port 8081) - MariaDB kezelő webes felület
#
# HASZNÁLATI ÚTMUTATÓ:
# ===================
# docker-compose up -d         # Indítás háttérben (detached mode)
# docker-compose down          # Leállítás és konténerek eltávolítása
# docker-compose logs          # Összes konténer naplójának megtekintése
# docker-compose logs nginx    # Csak az NGINX naplóinak megtekintése
# docker-compose exec php bash # Belépés a PHP konténerbe
# docker-compose ps            # Futó konténerek listázása
# docker-compose restart       # Újraindítás
# docker-compose build --no-cache # Újraépítés cache nélkül
#
# ELÉRÉSI PONTOK:
# ==============
# Weboldal (NGINX): http://localhost:8080
# phpMyAdmin (MariaDB): http://localhost:8081
# MariaDB közvetlen: localhost:3306

# Docker Compose verzió specifikáció
# A version mező elavult az újabb Docker Compose verziókban

# =====================================================================
# SZOLGÁLTATÁSOK (SERVICES) DEFINÍCIÓI
# =====================================================================
# Itt definiáljuk az összes konténert és azok konfigurációját

services:
  # ===================================================================
  # NGINX WEBSZERVER KONTÉNER
  # ===================================================================
  # Az NGINX felelős a HTTP kérések fogadásáért és továbbításáért
  nginx:
    # Hivatalos NGINX Alpine Linux képfájl használata
    # Az Alpine verzió kisebb méretű és biztonságosabb
    image: nginx:1.18-alpine
    
    # Konténer egyedi neve a könnyebb azonosításhoz
    container_name: bibliotech_nginx
    
    # Port mapping: hoszt_port:konténer_port
    # A hoszt 8080-as portja a konténer 80-as portjára mutat
    ports:
      - "8080:80"
    
    # Volume mount-ok: fájlok és könyvtárak megosztása
    volumes:
      # Az egész projekt könyvtár mount-olása a webszerver gyökerébe
      - .:/var/www/html
      # Egyéni NGINX konfiguráció használata
      # Ez tartalmazza a PHP-FPM proxy beállításokat
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    
    # Függőség megadása: NGINX csak a PHP konténer elindulása után indul
    depends_on:
      - php
    
    # Hálózat csatlakozás a konténerek közötti kommunikációhoz
    networks:
      - bibliotech_network
    
    # Újraindítási szabály: mindig újraindítás, kivéve manuális leállítás
    restart: unless-stopped

  # ===================================================================
  # PHP-FPM KONTÉNER 
  # ===================================================================
  # A PHP-FPM futtatja a Laravel alkalmazást és dolgozza fel a PHP kódot
  php:
    # Egyéni Dockerfile alapján építjük fel a képfájlt
    # Ez tartalmazza a szükséges PHP bővítményeket és Composer-t
    build:
      # Build context: melyik könyvtárból építsük
      context: ./docker/php
      # Dockerfile neve és helye
      dockerfile: Dockerfile
    
    # Konténer egyedi neve
    container_name: bibliotech_php
    
    # Volume mount: projekt fájlok elérhetősége a PHP számára
    volumes:
      # Teljes projekt könyvtár mount-olása
      # Ez lehetővé teszi a real-time kóddejlesztést
      - .:/var/www/html
    
    # Hálózat csatlakozás
    networks:
      - bibliotech_network
    
    # Újraindítási szabály
    restart: unless-stopped
    
    # Környezeti változók a Laravel .env fájlhoz
    # Ezek felülírják az alkalmazás adatbázis beállításait
    environment:
      # MariaDB konténer hostneve (szolgáltatás neve)
      - DB_HOST=mariadb
      # MySQL/MariaDB alapértelmezett portja
      - DB_PORT=3306
      # Adatbázis neve
      - DB_DATABASE=bibliotech
      # Felhasználói fiók neve
      - DB_USERNAME=bibliotech_user
      # Felhasználói jelszó
      - DB_PASSWORD=bibliotech_pass

  # ===================================================================
  # MARIADB ADATBÁZIS KONTÉNER
  # ===================================================================
  # MariaDB a MySQL kompatibilis nyílt forráskódú adatbázis-kezelő
  mariadb:
    # Hivatalos MariaDB 10.5 képfájl
    # Ez a verzió stabil és Laravel-lel kompatibilis
    image: mariadb:10.5
    
    # Konténer egyedi neve
    container_name: bibliotech_mariadb
    
    # Port mapping: külső hozzáférés az adatbázishoz
    # Hasznos fejlesztéshez és külső eszközökhöz (pl. MySQL Workbench)
    ports:
      - "3306:3306"
    
    # MariaDB specifikus környezeti változók
    # Ezek beállítják az adatbázist első indításkor
    environment:
      # Root felhasználó jelszava (adminisztrációs célokra)
      MYSQL_ROOT_PASSWORD: root_password
      # Automatikusan létrehozandó adatbázis
      MYSQL_DATABASE: bibliotech
      # Alkalmazás-specifikus felhasználó neve
      MYSQL_USER: bibliotech_user
      # Alkalmazás-specifikus felhasználó jelszava
      MYSQL_PASSWORD: bibliotech_pass
    
    # Volume mount-ok az adatperzisztencia és inicializálás céljából
    volumes:
      # Perzisztens adattárolás: az adatok túlélik a konténer újraindítását
      - mariadb_data:/var/lib/mysql
      # Inicializáló SQL script automatikus futtatása
      # Ez létrehozza a kezdeti adatbázis struktúrát
      - ./docker/mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql
    
    # Hálózat csatlakozás
    networks:
      - bibliotech_network
    
    # Újraindítási szabály
    restart: unless-stopped

  # ===================================================================
  # PHPMYADMIN WEBKEZELŐ KONTÉNER
  # ===================================================================
  # phpMyAdmin biztosítja a MariaDB webes felületét
  phpmyadmin:
    # Hivatalos phpMyAdmin képfájl
    image: phpmyadmin/phpmyadmin:latest
    
    # Konténer egyedi neve
    container_name: bibliotech_phpmyadmin
    
    # Port mapping: phpMyAdmin webes felület
    ports:
      - "8081:80"
    
    # phpMyAdmin specifikus környezeti változók
    environment:
      # MariaDB szerver hostname (szolgáltatás neve)
      PMA_HOST: mariadb
      # MariaDB portja
      PMA_PORT: 3306
      # Automatikus belépés root felhasználóval (fejlesztési környezethez)
      PMA_USER: root
      PMA_PASSWORD: root_password
      # PHP memória limit növelése nagyobb adatbázisokhoz
      UPLOAD_LIMIT: 256M
    
    # Függőség: phpMyAdmin csak a MariaDB elindulása után indul
    depends_on:
      - mariadb
    
    # Hálózat csatlakozás
    networks:
      - bibliotech_network
    
    # Újraindítási szabály
    restart: unless-stopped

# =====================================================================
# HÁLÓZATI KONFIGURÁCIÓ
# =====================================================================
# Egyéni hálózat létrehozása a konténerek közötti biztonságos kommunikációhoz

networks:
  # Egyéni bridge hálózat a Bibliotech alkalmazáshoz
  bibliotech_network:
    # Bridge driver: alapértelmezett Docker hálózati driver
    # Lehetővé teszi a konténerek közötti kommunikációt név alapján
    # Példa: a PHP konténer eléri a MariaDB-t "mariadb" hostname-nel
    driver: bridge

# =====================================================================
# VOLUME (ADATTÁROLÓ) KONFIGURÁCIÓ  
# =====================================================================
# Perzisztens adattárolók a konténerek adatainak megőrzéséhez

volumes:
  # MariaDB adatok perzisztens tárolása
  mariadb_data:
    # Local driver: az adatok a Docker hoszt gépen tárolódnak
    # Ez biztosítja, hogy az adatbázis adatok megmaradjanak
    # a konténer leállítása/újraindítása után is
    driver: local
    # Alternatívák:
    # - NFS driver: hálózati tárolás
    # - AWS EBS: cloud storage
    # - Azure Disk: Azure cloud storage

# =====================================================================
# FEJLESZTŐI TIPPEK ÉS HASZNOS PARANCSOK
# =====================================================================
#
# GYAKORI DOCKER-COMPOSE PARANCSOK:
# =================================
# 
# Környezet indítása:
#   docker-compose up -d
# 
# Logok megtekintése:
#   docker-compose logs -f              # Összes szolgáltatás
#   docker-compose logs -f nginx        # Csak NGINX
#   docker-compose logs -f php          # Csak PHP
#   docker-compose logs -f mariadb      # Csak MariaDB
#
# Konténerbe belépés:
#   docker-compose exec php bash       # PHP konténer
#   docker-compose exec nginx sh       # NGINX konténer
#   docker-compose exec mariadb bash   # MariaDB konténer
#
# Laravel parancsok futtatása:
#   docker-compose exec php php artisan migrate
#   docker-compose exec php php artisan db:seed
#   docker-compose exec php composer install
#   docker-compose exec php php artisan cache:clear
#
# Újraépítés és újraindítás:
#   docker-compose down                 # Leállítás
#   docker-compose build --no-cache     # Újraépítés
#   docker-compose up -d                # Indítás
#
# HIBAELHÁRÍTÁS:
# ==============
#
# Port foglaltság ellenőrzése:
#   netstat -tulpn | grep :8080
#   netstat -tulpn | grep :3306
#
# Konténerek állapotának ellenőrzése:
#   docker-compose ps
#   docker-compose top
#
# Volume-ok listázása:
#   docker volume ls
#   docker volume inspect bibliotech_mariadb_data
#
# Hálózat információk:
#   docker network ls
#   docker network inspect bibliotech_bibliotech_network
#
# TELJESÍTMÉNY OPTIMALIZÁLÁS:
# ===========================
#
# 1. Memory limit beállítás (nagy alkalmazásokhoz):
#    deploy:
#      resources:
#        limits:
#          memory: 512M
#        reservations:
#          memory: 256M
#
# 2. Egészség ellenőrzés (health check):
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#
# 3. Restart policy finomhangolás:
#    restart: on-failure:3
#
# BIZTONSÁGI MEGJEGYZÉSEK:
# ========================
# 
# FIGYELEM: Ez a konfiguráció FEJLESZTÉSI környezethez készült!
# Éles környezetben:
# 
# 1. Változtassa meg az alapértelmezett jelszavakat
# 2. Ne tegye elérhetővé a MariaDB portot (3306) kívülről
# 3. Használjon HTTPS-t
# 4. Korlátozza a phpMyAdmin hozzáférést
# 5. Használjon Docker secrets-et érzékeny adatokhoz
#
# Példa éles konfigurációhoz:
# ports:
#   - "127.0.0.1:3306:3306"  # Csak localhost hozzáférés
#
# environment:
#   MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
#
# secrets:
#   mysql_root_password:
#     file: ./secrets/mysql_root_password.txt

# ================================================================
# NAMED VOLUMES DEFINÍCIÓK
# ================================================================
